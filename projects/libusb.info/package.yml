distributable:
  url: https://github.com/libusb/libusb/releases/download/v{{ version }}/libusb-{{ version }}.tar.bz2
  strip-components: 1

versions:
  github: libusb/libusb/releases/tags 
  strip: /^v/

build:
  dependencies:
    tea.xyz/gx/cc: c99
    tea.xyz/gx/make: '*'
    gnu.org/autoconf: ^2
  script: |
    ./configure $ARGS
    make install
  env:
    ARGS:
      - --prefix="{{prefix}}"
      - --disable-dependency-tracking
      - --disable-debug

test:
  dependencies:
    tea.xyz/gx/cc: c99 
  script: |
    mv $FIXTURE test.c
    gcc test.c -lusb-1.0 "-I{{ prefix }}/include/libusb-1.0" -o test
    ./test
  # This fixture comes from the examples provided by libusb
  fixture: |
    #include <stdio.h>
    #include "libusb.h"

    static void print_devs(libusb_device **devs)
    {
      libusb_device *dev;
      int i = 0, j = 0;
      uint8_t path[8]; 

      while ((dev = devs[i++]) != NULL) {
        struct libusb_device_descriptor desc;
        int r = libusb_get_device_descriptor(dev, &desc);
        if (r < 0) {
          fprintf(stderr, "failed to get device descriptor");
          return;
        }
        
        printf("%04x:%04x (bus %d, device %d)", desc.idVendor, desc.idProduct,
          libusb_get_bus_number(dev), libusb_get_device_address(dev));
        r = libusb_get_port_numbers(dev, path, sizeof(path));
        if (r > 0) {
          printf(" path: %d", path[0]);
          for (j = 1; j < r; j++)
            printf(".%d", path[j]);
        }
        printf("\n");
      }
    }

    int main(void)
    {
      libusb_device **devs;
      int r;
      ssize_t cnt;

      r = libusb_init(NULL);
      if (r < 0)
        return r;

      cnt = libusb_get_device_list(NULL, &devs);
      if (cnt < 0){
        libusb_exit(NULL);
        return (int) cnt;
      }
      
      print_devs(devs);
      libusb_free_device_list(devs, 1);

      libusb_exit(NULL);
      return 0;
    }
